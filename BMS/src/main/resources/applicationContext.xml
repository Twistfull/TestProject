<?xml version="1.0" encoding="UTF-8"?>
	<!-- xmlns:aop="http://www.springframework.org/schema/aop" -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"	
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd"
	default-lazy-init="true" >
	<!-- 		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd" -->
	
	<!-- 加载配置属性文件，这个标签会读取所有的.properties文件，application.properties里面放置了连接数据库的信息 -->
	<context:property-placeholder ignore-resource-not-found="true" location="classpath*:*.properties" />
	
	<!-- 使用annotation(component-scan中包含了它) 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->
	<context:component-scan base-package="com.bms.reader.service" />
	
	<!-- 因为上面已经读取了application.properties文件，才能进行数据源配置, 使用应用服务器的数据库连接池  -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="maxIdle" value="5" />
		<property name="maxActive" value="5" />
		<property name="defaultAutoCommit" value="false" />
		<property name="timeBetweenEvictionRunsMillis" value="3600000" />
		<property name="minEvictableIdleTimeMillis" value="3600000" />
	</bean>
	
	<!-- MyBatis配置 -->
	<bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- configLocation：用于指定Mybatis的配置文件位置。如果指定了该属性，那么会以该配置文件的内容作为配置信息构建对应的
		SqlSessionFactoryBuilder，但是后续属性指定的内容会覆盖该配置文件里面指定的对应内容。 --> 
		<property name="configLocation" value="classpath:mybatis.xml" />
		<!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置
		typeAliasesPackage：它一般对应我们的实体类所在的包，这个时候会自动取对应包中不包括包名的简单类名作为包括包名的别名。
		多个package之间可以用逗号或者分号等来进行分隔。(value的值一定要是包的全名) 
		typeAliasesSuperType：代表实体类所继承的类的位置 -->
		<property name="typeAliasesPackage" value="com.bms.reader.persist" />
		<!-- 显式指定Mapper文件位置
		mapperLocations：它表示我们的Mapper文件存放的位置，当我们的Mapper文件跟对应的Mapper接口
		处于同一位置的时候可以不用指定该属性的值。  -->
		<property name="mapperLocations">
			<list>
				<value>classpath:com/bms/reader/persist/*Mapper.xml</value>
			</list>
		</property>
		<property name="plugins">
			<array>
				<bean class="com.github.pagehelper.PageInterceptor">
					<!-- helperDialect：分页插件会自动检测当前的数据库链接，自动选择合适的分页方式。也可以指定 -->
					<!-- reasonable:默认false。为 true 时，pageNum<=0 时会查询第一页， pageNum>pages（超过总数时），会查询最后一页。 -->
					<property name="properties">
						<value>
							helperDialect=oracle
							reasonable=true
						</value>
					</property>
				</bean>
			</array>
		</property>
	</bean>
	
	<!-- scan for mappers and let them be autowired(dao接口文件) -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.bms.reader.persist" />
	</bean>
	
		<!-- 定义事物管理器(声明式的事物) -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 使用annotation定义事务(启用对事务注解的支持 ) -->
	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />
		
	<!-- aop拦截器方式配置事物 -->
	<tx:advice id="TxAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="edit*"  propagation="REQUIRED"/>
			<tx:method name="add*"  propagation="REQUIRED"/>
			<!-- <tx:method name="ins*"  propagation="REQUIRED"/> -->
		</tx:attributes>
	</tx:advice>
	
</beans>
