<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<!-- 这里namespace必须是UserMapper接口的路径，不然要运行的时候要报错 "is not known to the MapperRegistry" -->
<mapper namespace="com.bms.reader.persist.ReaderUserMapper" >
<!-- 要对应到所有属性 才能使用-->
  <resultMap id="BaseResultMap" type="com.bms.reader.model.ReaderUser" >
    <constructor >
      <idArg column="ID" jdbcType="VARCHAR" javaType="java.lang.String" /><!--jdbcType 对可能为空的值进行处理 -->
      <arg column="USERNAME" jdbcType="VARCHAR" javaType="java.lang.String" /><!-- 使用idAeg 而不用id result是由于有构造方法元素 -->
      <arg column="PASSWORD" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="USER_TYPE" jdbcType="VARCHAR" javaType="java.lang.String" />
    </constructor>
  </resultMap>
  <sql id="Base_Column_List" >
    ID, USERNAME, PASSWORD, USER_TYPE
  </sql>
<!--   <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select
    <include refid="Base_Column_List" />
    from STUDY_USER
    where ID = #{id,jdbcType=VARCHAR}
  </select>
 -->
  <select id="selectByUserName" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select
    <include refid="Base_Column_List" />
    from READERUSER
    where username = #{username,jdbcType=VARCHAR}
  </select>

  <!-- <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from STUDY_USER
    where ID = #{id,jdbcType=VARCHAR}
  </delete>-->
  <insert id="insert"  parameterType="com.bms.reader.model.ReaderUser" >
    <selectKey keyProperty="id" resultType="String" order="BEFORE">  
        select  replace(sys_guid(),'-','')   from dual  
    </selectKey> 
    insert into READERUSER(ID, USERNAME, PASSWORD,
      USER_TYPE)
    values (#{id,jdbcType=VARCHAR}, #{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR},
      #{userType,jdbcType=VARCHAR})
  </insert>
 <!-- <insert id="insertSelective" parameterType="com.kingtsoft.study.model.StudyUser" >
    insert into STUDY_USER
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        ID,
      </if>
      <if test="username != null" >
        USERNAME,
      </if>
      <if test="password != null" >
        PASSWORD,
      </if>
      <if test="userType != null" >
        USER_TYPE,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="username != null" >
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="userType != null" >
        #{userType,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.kingtsoft.study.model.StudyUser" >
    update STUDY_USER
    <set >
      <if test="username != null" >
        USERNAME = #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        PASSWORD = #{password,jdbcType=VARCHAR},
      </if>
      <if test="userType != null" >
        USER_TYPE = #{userType,jdbcType=VARCHAR},
      </if>
    </set>
    where ID = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.kingtsoft.study.model.StudyUser" >
    update STUDY_USER
    set USERNAME = #{username,jdbcType=VARCHAR},
      PASSWORD = #{password,jdbcType=VARCHAR},
      USER_TYPE = #{userType,jdbcType=VARCHAR}
    where ID = #{id,jdbcType=VARCHAR}
  </update> -->
</mapper>